<?php

/**
 * Created by tiway
 * Date: 2017/9/22
 * Time: 9:31
 */
namespace app\mobile\controller;


use extend\UploadImg;
use think\Db;
use think\Exception;

class Order extends \app\common\controller\MobileBase
{
    private $order_waitting, $order_received,$order_finish,$order_back,$max_integral,$money_integral;

    private $back_apply,$back_confirm,$back_refuse,$back_finish;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->order_waitting  = 4;//待发货
        $this->order_received  = 5;//待收货
        $this->order_finish    = 6;//已完成
        $this->order_back      = 7;//申请退货

        $this->back_apply     = 8;//退货中
        $this->back_refuse    = 9;//拒绝退货
        $this->back_confirm   = 10;//退款中
        $this->back_finish    = 12;//退款完成

        $this->max_integral   = 86;//单个产品可兑换最大积分
        $this->money_integral = 87;//积分兑换人民币比例



    }

    /**
     * @desc 确认订单
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_commit_view($api = false){
        if(request()->isPost()){

            if(empty($this->user_id))
                return json(apiSessionFail());

            //默认地址
            $address = model('UserAddress')
                ->field('address_id,user_name,user_phone,area_id1,area_id2,area_id3,address,create_time')
                ->where('user_id',$this->user_id)
                ->order('is_default desc')
                ->find();
            if(!empty($address)){
                $address['area_id1'] = $address->province->city_name;
                $address['area_id2'] = $address->city->city_name;
                if($address['area_id3'] != 0){
                    $address['area_id3'] = $address->area->city_name;
                }else{
                    $address['area_id3'] = '';
                }

                unset($address->province);
                unset($address->city);
                unset($address->area);
            }

            $goods_id = input('goods_id');
            $price_id = input('price_id');
            try{
                if(empty($goods_id))
                    throw new Exception('参数错误');
                if(empty($price_id))
                    throw new Exception('参数错误');

                //商品信息
                $goods_info = model('Goods')
                    ->field('goods_id,goods_name,goods_thums')
                    ->with(['goodsPrice'=>function($query)use($price_id){
                        $query->field('id as price_id,goods_id,campaign_price,attrs_values')->where('id',$price_id);
                    }])
                    ->where('goods_id',$goods_id)
                    ->find();
                $attr = model('Goods')->get_four_attr($goods_info['goods_price'][0]['attrs_values']);
                $goods_info['attr'] = $attr;

                //用户积分能用最大积分
                $max_integral   = model('Config')->where('id',$this->max_integral)->value('config_value');
                //能兑换的人民币
                $money_integral = model('Config')->where('id',$this->money_integral)->value('config_value');
                $integral_total = model('Integral')->getTotalIntegrals($this->user_id);

                $integral_money = sprintf('%.2f', $money_integral);


                $data = array(
                    'max_integral'     => $max_integral,
                    'integral_money'  => $integral_money,
                    'integral_total'   => $integral_total['total_integral'],
                    'address'          => $address,
                    'goods_info'       => $goods_info,

                );

                if($api){
                    return json(apiSuccess($data));
                }else{
                    return view(['data'=>$data]);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }
    }

    /**@desc 提交订单
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_commit($api = false){
        if(request()->isPost()){
            try{
                $data = input();
                if(empty($this->user_id))
                    return json(apiSessionFail());
                if(empty($data['address_id']))
                    throw new Exception('参数错误');
                if(empty($data['goods_id']))
                    throw new Exception('参数错误');
                if(empty($data['price_id']))
                    throw new Exception('参数错误');
                if(empty($data['goods_num']))
                    throw new Exception('参数错误');
                if(empty($data['total_money']))
                    throw new Exception('参数错误');
                //地址
                $address = model('User_address')
                    ->field('user_name,user_phone,area_id1 as province,area_id2 as city,area_id3 as area,address')->find($data['address_id']);
                //商品信息
                $price_id = $data['price_id'];
                $goods_info = model('Goods')
                    ->field('goods_id,goods_name,goods_thums')
                    ->with(['goodsPrice'=>function($query)use($price_id){
                        $query->field('id as price_id,goods_id,campaign_price,price,attrs_values')->where('id',$price_id);
                    }])
                    ->where('goods_id',$data['goods_id'])
                    ->find();
                if(empty($goods_info['goods_price']))
                    throw new Exception('参数错误');
                //属性
                $attr = model('Goods')->get_four_attr($goods_info['goods_price'][0]['attrs_values']);
                $attr_str = serialize($attr);
                //订单总价
                $total_price = $data['goods_num']*$goods_info['goods_price'][0]['price'];
                //是否满足积分折扣条件
                $integral_total = model('Integral')->getTotalIntegrals($this->user_id);
                $max_integral   = model('Config')->where('id',$this->max_integral)->value('config_value');
                //订单号
                $order_sn = model('Order')->createOrderSn();
                if($integral_total['total_integral'] > $max_integral && $data['is_discount'] == 'Y'){
                    $discount = model('Config')->where('id',$this->money_integral)->value('config_value');
                    //积分消费
                    $integral_data = array(
                        'user_id'   => $this->user_id,
                        'goods_id'  => $data['goods_id'],
                        'price_id'  => $data['price_id'],
                        'integral'  => -(int)$max_integral,
                        'is_effect' => 'N',
                        'order_sn'  => $order_sn,
                        'remark'    => '购买'.$goods_info['goods_name'].'积分抵扣'
                    );
                    model('Integral')->save($integral_data);
                }else{
                    $discount = 0;
                }
                //实际成交价格
                $deal_price = $data['goods_num']*$goods_info['goods_price'][0]['campaign_price'] - $discount;
                //前后端验证金额，不对就返回
                if($data['total_money'] != $deal_price || $deal_price < 0)
                    throw new Exception('参数错误');
                //生成订单
                $order_data = array(
                    'order_sn'      => $order_sn,
                    'user_id'       => $this->user_id,
                    'province'      => $address['province'],
                    'city'          => $address['city'],
                    'area'          => $address['area'],
                    'address'       => $address['address'],
                    'total_price'   => $total_price,
                    'deal_price'    => $deal_price,
                    'dess'          => $data['desc'],
                    'user_name'     => $address['user_name'],
                    'user_phone'    => $address['user_phone'],
                    'status'        => 2
                );
                 $order = \app\common\model\Order::create($order_data);
                 $order_id = $order->order_id;
                 //生成商品订单
                $order_info_data = array(
                    'order_id'      => $order_id,
                    'goods_id'      => $data['goods_id'],
                    'price_id'      => $data['price_id'],
                    'goods_name'    => $goods_info['goods_name'],
                    'good_image'    => $goods_info['goods_thums'],
                    'good_attr'     => $attr_str,
                    'goods_count'   => $data['goods_num'],
                    'market_price'  => $goods_info['goods_price'][0]['price'],
                    'price'         => $goods_info['goods_price'][0]['campaign_price'],
                );
                $res = model('OrderInfo')->save($order_info_data);
                if(empty($order_id) || empty($res))
                    throw new Exception('添加订单失败');
                $re_data= array(
                    'order_id'  => $order_id,
                    'order_sn'  => $order_sn,
                    'order_rmb' => $deal_price,
                    'goods_num' => $data['goods_num']
                );
                if($api){
                    return json(apiSuccess($re_data));
                }else{
                    return view(['data'=>$data]);
                }


            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }
    }

    /**
     * @desc 根据用户输入类型（待发货/待收货/待评论）显示订单列表
     * @param string $type
     */
    public function order_list($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());

                $type  = input('type');
                $model = model('Order')->field('order_id,despatch_money,total_price,deal_price,status');

                if($type == 1){#待发货
                    $model = $model->with(['orderInfo'=>function($query){
                        $query->field('order_id,goods_id,goods_name,good_image,good_attr,goods_count,market_price,price,has_comment,update_time')->order('update_time desc');
                    }])->where('status',$this->order_waitting);
                }elseif ($type == 2){#待收货
                    $model = $model->with(['orderInfo'=>function($query){
                        $query->field('order_id,goods_id,goods_name,good_image,good_attr,goods_count,market_price,price,has_comment,update_time')->order('update_time desc');
                    }])->where('status',$this->order_received);
                }elseif ($type == 3){#待评论
                    $model = $model->with(['orderInfo'=>function($query){
                        $query->field('order_id,goods_id,goods_name,good_image,good_attr,goods_count,market_price,price,has_comment,update_time')->where('has_comment','N')->order('update_time desc');
                    }])->where('status',$this->order_finish);
                }else{#所有订单
                    $model = $model->with(['orderInfo'=>function($query){
                        $query->field('order_id,goods_id,goods_name,good_image,good_attr,goods_count,market_price,price,has_comment,update_time')->order('update_time desc');
                    }])->where('status','<>',2);
                }

                $order = $model->where(['user_id'=>$this->user_id,'recycle'=>1])->select();
                $new_order = array();
                foreach ($order as $key => $value){
                    if(!empty($value['order_info'])){
                        foreach($value['order_info'] as $k => $v){
                            $v['good_attr'] = unserialize($v['good_attr']);
                        }
                        $new_order[] = $value;
                    }

                }

                if($api){
                    return json(apiSuccess($new_order));
                }else{
                    return view(['order'=>$new_order]);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }
    }

    /**
     * @desc 订单详情
     * @param int $order_id
     */
    public function order_detail($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                        return json(apiSessionFail());
                $order_id = input('order_id');
                if(empty($order_id))
                    throw new Exception("请选择订单");

                $order = model('order')->get_order_detail($order_id);
                if(empty($order))
                    throw new Exception("请求失败");

                $status = input('status',0);
                if(in_array($status,[$this->order_back,$this->back_apply,$this->back_confirm,$this->back_finish])){
                    $order_back = model('OrderBack')
                        ->alias('OB')
                        ->join('ui_order_back_reason OBR ',' OB.cause = OBR.reason_id')
                        ->field('OB.back_money,OB.back_no,OB.cause,OB.create_time,OBR.reason')
                        ->where('OB.order_id',$order_id)
                        ->find();
                    if(empty($order) || empty($order_back))
                        throw new Exception("请求失败");

                    $order['order_back'] = $order_back;
                }

                if($api){
                    return json(apiSuccess($order));
                }else{
                    return view(['order'=>$order]);
                }
            }catch(\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }
    }

    /**
     * @desc 提醒发货
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_remind($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());

                $order_id = input('order_id');
                if(empty($order_id))
                    throw new Exception("请选择要提醒发货订单");

                $res = model('OrderRemind')->save(['order_id'=>$order_id,'user_id'=>$this->user_id]);
                if(empty($res))
                    throw new Exception('操作失败');

                if($api){
                    return json(apiSuccess());
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

                
        }
    }

    /**
     * @desc 确认收货
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_confirm($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());

                $order_id = input('order_id');
                if(empty($order_id))
                    throw new Exception("请选择要确认收货订单");

                $status_before = model('order')->where('order_id',$order_id)->value('status');
                if($status_before != 5)
                    throw new Exception('订单不是待收货状态');

                //修改oder状态
                $res_order      = model('Order')->where('order_id',$order_id)->update(['status'=>$this->order_finish]);
                if(empty($res_order))
                    throw new Exception('操作失败');

                if($api){
                    return json(apiSuccess());
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

        }
    }

    /**
     * @desc 删除订单
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_del($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());

                $order_id = input('order_id');
                if(empty($order_id))
                    throw new Exception("请选择要确认收货订单");

                //修改oder状态
                $now = time();
                $res_order      = model('Order')->where(['order_id'=>$order_id,'user_id'=>$this->user_id])->update(['delete_time'=>$now]);
                $res_order_info = model('OrderInfo')->where('order_id',$order_id)->update(['delete_time'=>$now]);
                if(empty($res_order) || empty($res_order_info))
                    throw new Exception('操作失败');

                if($api){
                    return json(apiSuccess());
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

        }
    }

    /**
     * @desc 申请退货页面
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_back_view($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());
                //订单商品信息
                $order_id = input('order_id');
                $order = model('Order')->get_order_detail($order_id);
                if(empty($order))
                    throw new Exception('订单不存在');
                $order_info = $order['order_info'];
                //订单号
                $order_sn = $order['order_sn'];
                //退款原因
                $reasons = Db::table('ui_order_back_reason')->select();

                $data = array(
                    'order_sn'      => $order_sn,
                    'order_info'    => $order_info,
                    'reasons'       => $reasons
                );

                if($api){
                    return json(apiSuccess($data));
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

        }
    }

    /**
     * @desc 申请退货
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_back($api = false){
        if(request()->isPost()){
            try{
                $data = input();
                if(empty($this->user_id))
                    return json(apiSessionFail());
                if(empty($data['order_id']))
                    throw new Exception('参数错误');
                if(!is_numeric($data['cause']))
                    throw new Exception('参数错误');
                if(empty($data['order_sn']))
                    throw new Exception('参数错误');
                if(empty($data['back_money']))
                    throw new Exception('请输入退款金额');


                if(!empty($data['imgs'])){
                    $img_arr = array();
                    foreach ($data['imgs'] as $key => $value){
                        $img_arr['uploadImg']['back_img'][$key] = $value;
                    }
                    $year = date('Y/m',time());
                    //上传图片 返回图片名称 数组
                    $res  = UploadImg::upload("back/$year",'time',$img_arr)->getMsg();
                    if(isset($res['info']['back_img'])){
                        $back_imgs = array();
                        foreach ($res['info']['back_img'] as $k => $v) {
                            $back_imgs['back_img'][$k] =  "/back/".$year."/".$v;
                        }
                    }
                    unset($data['imgs']);
                }

                $back_data = array(
                    'order_id'  => $data['order_id'],
                    'user_id'   => $this->user_id,
                    'back_no'   => $data['order_sn'],
                    'cause'     => $data['cause'],
                    'status'    => $this->order_back,
                    'back_money'=> $data['back_money'],
                    'back_imgs' => isset($back_imgs['back_img']) ? serialize($back_imgs['back_img']) :  ''
                );

                //添加退款记录
                $back_res  = model('OrderBack')->save($back_data);
                //修改订单状态
                $order_res     = model('Order')->where('order_id',$data['order_id'])->update(['status'=>$this->order_back]);

                if(empty($back_res) || empty($order_res))
                    throw new Exception('操作失败');

                if($api){
                    return json(apiSuccess());
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

        }
    }

    /**
     * @desc 订单投诉
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_complain($api = false){
        if(request()->isPost()){
            try{
                $data = input();
                if(empty($this->user_id))
                    return json(apiSessionFail());
                if(empty($data['order_id']))
                    throw new Exception('参数错误');
                if(empty($data['complain']))
                    throw new Exception('参数错误');
                if(empty($data['complain_remark']))
                    throw new Exception('请输入投诉原因');

                if(isset($data['imgs'])){
                    $img_arr = array();
                    foreach ($data['imgs'] as $key => $value){
                        $img_arr['uploadImg']['complain_img'][$key] = $value;
                    }
                    $year = date('Y/m',time());
                    //上传图片 返回图片名称 数组
                    $res  = UploadImg::upload("complain/$year",'time',$img_arr)->getMsg();
                    if(isset($res['info']['complain_img'])){

                        $complain_imgs = array();
                        foreach ($res['info']['complain_img'] as $k => $v) {
                            $complain_imgs[] =  "/complain/".$year."/".$v;
                        }
                    }
                    unset($data['imgs']);
                }

                $back_data = array(
                    'order_id'  => $data['order_id'],
                    'user_id'   => $this->user_id,
                    'complain_id'   => $data['complain'],
                    'complain_remark'     => $data['complain_remark'],
                    'goods_imgs' => serialize($complain_imgs)
                );


                //添加投诉记录
                $back_res  = model('OrderComplain')->save($back_data);

                if(empty($back_res))
                    throw new Exception('操作失败');

                if($api){
                    return json(apiSuccess());
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

        }
    }

    /**
     * @desc 订单评论
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_comment($api = false){
        if(request()->isPost()){
            try{
                $data = input();
                if(empty($this->user_id))
                    return json(apiSessionFail());
                if(empty($data['order_id']))
                    throw new Exception('参数错误');
                if(empty($data['goods_id']))
                    throw new Exception('参数错误');
                if(empty($data['price_id']))
                    throw new Exception('参数错误');
                if(empty($data['score']))
                    throw new Exception('请选择评价');

                if(isset($data['imgs'])){
                    $img_arr = array();
                    foreach ($data['imgs'] as $key => $value){
                        $img_arr['uploadImg']['comment_img'][$key] = $value;
                    }
                    $year = date('Y/m',time());
                    //上传图片 返回图片名称 数组
                    $res  = UploadImg::upload("comment/$year",'time',$img_arr)->getMsg();
                    if(isset($res['info']['comment_img'])){
                        $comment_imgs = array();
                        foreach ($res['info']['comment_img'] as $k => $v) {
                            $comment_imgs['comment_img'.($k+1)] =  "/comment/".$year."/".$v;
                        }
                    }
                    unset($data['imgs']);
                }

                $comment_data = array(
                    'order_id'  => $data['order_id'],
                    'goods_id'  => $data['goods_id'],
                    'price_id'  => $data['price_id'],
                    'user_id'   => $this->user_id,
                    'comment'   => $data['comment'],
                    'score'     => $data['score'],
                    'com_img1'  => isset($comment_imgs['comment_img1'])? $comment_imgs['comment_img1'] :'',
                    'com_img2'  => isset($comment_imgs['comment_img2'])? $comment_imgs['comment_img2'] :'',
                    'com_img3'  => isset($comment_imgs['comment_img3'])? $comment_imgs['comment_img3'] :'',
                    'com_img4'  => isset($comment_imgs['comment_img4'])? $comment_imgs['comment_img4'] :'',
                    'com_img5'  => isset($comment_imgs['comment_img5'])? $comment_imgs['comment_img5'] :'',
                );

                //添加评论记录
                $back_res  = model('GoodsComment')->save($comment_data);
                if(empty($back_res))
                    throw new Exception('操作失败');

                //评论积分
                $config_model = model('Config');
                switch ($data['score'])
                {
                    case 1:
                        $integral = $config_model->get_bad_integral();
                        $remark = '差评积分抵扣';
                        break;
                    case 2:
                        $integral = $config_model->get_commonly_integral();
                        $remark = '中评积分赠送';
                        break;
                    case 3:
                        $integral = $config_model->get_praise_integral();
                        $remark = '好评积分赠送';
                        break;

                }
                //添加积分记录
                if($integral != 0){
                    $integral_data = array(
                        'user_id'   => $this->user_id,
                        'goods_id'  => $data['goods_id'],
                        'price_id'  => $data['price_id'],
                        'integral'  => $integral,
                        'remark'    => $remark
                    );
                    model('integral')->save($integral_data);
                }

                //重新计算好评率
                $good_comment_per = model('GoodsComment')->getPraisePercentage($data['goods_id']);
                model('Goods')->where('goods_id',$data['goods_id'])->update(['praise_percentage'=>$good_comment_per]);
                //订单修改为已经评论
                model('OrderInfo')->where(['order_id'=>$data['order_id'],'goods_id'=>$data['goods_id'],'price_id'=>$data['price_id']])->update(['has_comment'=>'Y']);

                if($api){
                    return json(apiSuccess());
                }else{
                    return view(['msg'=>'操作成功']);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }

        }
    }

    /**
     * @desc 订单物流
     * @return \think\response\Json\
     */
    public function order_logistics(){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());
                $data = input();
                if(empty($data['order_sn']))
                    throw new Exception('参数错误');
                if(empty($data['logistics_company']))
                    throw new Exception('参数错误');
                if(empty($data['logistics_num']))
                    throw new Exception('参数错误');

               //查看订单状态
                $order_status = model('order')->where('order_sn',$data['order_sn'])->value('status');
                if($order_status != 8)
                    throw new Exception('订单状态错误');

                $back_data = array(
                    'logistics_company' => $data['logistics_company'],
                    'logistics_num'     => $data['logistics_num'],
                    'remark'            => $data['remark']
                );
                $res = model('OrderBack')->where('back_no',$data['order_sn'])->update($back_data);
                //修改订单
                $order_re = model('Order')->where('order_sn',$data['order_sn'])->update(['status'=>$this->back_confirm]);
                if(empty($res) || empty($order_re))
                    throw new Exception('操作失败');

                return json(apiSuccess());

            }catch (\Exception $e){

                return json(apiFail($e->getMessage()));
            }
        }
    }

    /**
     * @desc 订单退货详情
     * @param bool $api
     * @return \think\response\Json|\think\response\View
     */
    public function order_back_detail($api = false){
        if(request()->isPost()){
            try{
                if(empty($this->user_id))
                    return json(apiSessionFail());
                $order_id = input('order_id');
                if(empty($order_id))
                    throw new Exception("请选择订单");

                $order = model('order')->get_order_detail($order_id);
                $order_back = model('OrderBack')
                    ->alias('OB')
                    ->join('ui_order_back_reason OBR ',' OB.cause = OBR.reason_id')
                    ->field('OB.back_money,OB.back_no,OB.cause,OB.create_time,OBR.reason')
                    ->where('OB.order_id',$order_id)
                    ->find();
                if(empty($order) || empty($order_back))
                    throw new Exception("请求失败");

                $data = array(
                    'order'         => $order,
                    'order_back'    => $order_back
                );

                if($api){
                    return json(apiSuccess($data));
                }else{
                    return view(['data'=>$data]);
                }
            }catch(\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }
    }

}


