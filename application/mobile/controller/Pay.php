<?php
namespace app\mobile\controller;
use app\common\controller\MobileBase;
use think\Exception;
use vendor\alipay\AlipayTradeService;
use vendor\WxPayApi;
use vendor\WxPayUnifiedOrder;
use vendor\WxPayOrderQuery;
/**
 * 支付接口 微信/支付宝
 * @author  wanggang
 * @version 2017/10/10
 */
class Pay extends MobileBase{

    private $order_waitting, $order_received,$order_finish,$order_back;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->order_waitting  = 4;//待发货
        $this->order_received  = 5;//待收货
        $this->order_finish    = 6;//已完成
        $this->order_back      = 7;//申请退货

    }

    // 支付宝支付

    /**
     * @return \think\response\Json|void
     */
    public function alipay(){
        try{
            $out_trade_no = input('order_sn');
            $subject =  input('order_name');
            $total_amount = input('total_money');
            if(empty($out_trade_no) || empty($subject) || empty($total_amount))
                throw new  Exception('参数错误');

            $body = '';
            $timeout_express="1m";
            $config      = $this->_get_config('alipay');

            vendor('alipay.AlipayTradeWapPayContentBuilder');
            $payRequestBuilder = new \AlipayTradeWapPayContentBuilder();
            $payRequestBuilder->setBody($body);
            $payRequestBuilder->setSubject($subject);
            $payRequestBuilder->setOutTradeNo($out_trade_no);
            $payRequestBuilder->setTotalAmount($total_amount);
            $payRequestBuilder->setTimeExpress($timeout_express);
            $payResponse = new AlipayTradeService($config);
            $payResponse->wapPay($payRequestBuilder,$config['return_url'],$config['notify_url']);
            return ;
        }catch (\Exception $e){
            return json([
                'code'  => 400,
                'msg'   => $e->getMessage()
            ]);
        }
    }

    public function alipay_return_url(){
        $arr = input();
        $config      = $this->_get_config('alipay');
        $alipaySevice = new AlipayTradeService($config);
        $result = $alipaySevice->check($arr);
        if($result){
            $total_amount = model('Order')->where('order_sn',$arr['out_trade_no'])->value('deal_price');
            if($arr['total_amount'] != $total_amount && $arr['app_id'] != $config['app_id'] ){
                $this->redirect('http://essj.baogt.com/Phone/headlines/My_Order.html');
            }
        }else{
            return json([
                'code'  => 400,
                'msg'   => '支付信息有误，请联系工作人员'
            ]);
        }
    }
    public function alipay_notify_url(){
        if(request()->isPost()){
            try{
                $arr = input();
                $config      = $this->_get_config('alipay');
                $alipaySevice = new AlipayTradeService($config);
                $alipaySevice->writeLog(var_export($_POST,true));
                $result = $alipaySevice->check($arr);
                file_put_contents('alinotify1.txt',serialize($result));
                file_put_contents('aliconfig2.txt',serialize($config));
                if(!$result)
                    throw new Exception('fail');
                if($arr['auth_app_id'] != $config['app_id'])
                    throw new Exception('fail');
                $out_trade_no =$arr['out_trade_no'];
                $total_amount = $arr['total_amount'];
                if($arr['trade_status'] == 'TRADE_SUCCESS') {
                    $res = $this->deal_order($out_trade_no,$total_amount);
                    file_put_contents('alires.txt',serialize($res));
                    if(!$res)
                        throw new Exception('fail');
                }
                echo 'success';
            }catch (\Exception $e){
                echo $e->getMessage();
            }
        }
    }

    //微信支付
    public function winxpay(){
//        if(request()->isPost()){
        try{
            $orderSn     = trim(input('order_sn'));
            $total_money = input('total_money');
            $order_name  = input('order_name');
//                if(empty($this->user_id))
//                    return json(apiSessionFail());
            if(empty($orderSn))
                throw new Exception('参数错误');
            if(empty($total_money))
                throw new Exception('参数错误');

            //检查订单金额是否正确
            $order_money = model('order')->where('order_sn',$orderSn)->value('deal_price');
            if($total_money != $order_money)
                throw new Exception('订单金额对不上，请联系工作人员');
            $config = $this->_get_config('weipay');

            $this->_setPayConfig($config);
            $nonce_str = MD5($orderSn);
            $notify_url = 'http://essj.baogt.com/mobile/pay/winxpay_notify';
            vendor('winxpay.JsApiPay');
            $input = new WxPayUnifiedOrder();
            $input->SetBody($order_name);
            $input->SetAppid(APPID);
            $input->SetMch_id(MCHID);
            $input->SetOut_trade_no($orderSn);
            $input->SetNonce_str($nonce_str);
            $input->SetTotal_fee($total_money*100);
            $input->SetNotify_url($notify_url);
            $input->SetTrade_type("MWEB");
            $input->SetSpbill_create_ip($this->_get_client_ip());
            $input->SetScene_info('{"h5_info": {"type":"Wap","wap_url": "https://pay.qq.com","wap_name": "腾讯充值"}}');
            $order = WxPayApi::unifiedOrder($input);
            file_put_contents('result1.txt',serialize($orderSn));
            $pay_url = $order['mweb_url'].'&redirect_url='.urlencode('http://essj.baogt.com/mobile/pay/url_redirect');
            file_put_contents('wxpayurl.txt',$pay_url);
            $data = array(
                'pay_url' => $pay_url,
                'order_sn'=> $orderSn
            );
            return json(apiSuccess($data));

        }catch (\Exception $e){

            return json(apiFail($e->getMessage()));
        }
//        }

    }

    /**
     * notify_url接收页面
     */
    public function winxpay_notify(){
        $res = $this->getResult();
        $this->_setPayConfig($this->_get_config('weipay'));
        if(isset($res["OUT_TRADE_NO"]) && $res["OUT_TRADE_NO"] != ""){
            $transaction_id = trim($res['TRANSACTION_ID']);
            $out_trade_no = trim($res['OUT_TRADE_NO']);
            vendor('winxpay.JsApiPay');
            $input = new WxPayOrderQuery();
            $input->SetTransaction_id($transaction_id);
            $result = WxPayApi::orderQuery($input);
            if($result['trade_state'] == 'SUCCESS'){
                //订单信息验证
                $order_info = model('Order')
                    ->field('order_id,order_sn,user_id')
                    ->where(['order_sn'=>$out_trade_no])
                    ->with(['orderInfo'=>function($query){
                        $query->field('order_id,goods_id,price_id,goods_name,goods_count,good_attr,price');
                    }])
                    ->find();
                if(!empty($order_info)){
                    //修改订单状态
                    model('order')->where(['order_sn'=>$out_trade_no])->update(['status'=>$this->order_waitting]);
                    //添加积分
                    //获得赠送积分
                    $goods_id   = $order_info['orderInfo'][0]['goods_id'];
                    $price_id   = $order_info['orderInfo'][0]['price_id'];
                    $user_id    = $order_info['user_id'];
                    $goods_count= $order_info['orderInfo'][0]['goods_count'];
                    $goods_name = $order_info['orderInfo'][0]['goods_name'];
                    //修改销售数量
                    model('Goods')->where(['goods_id'=>$goods_id])->setInc('sale_count',$goods_count);
                    //商品赠送积分
                    $integral = model('Goods_price')->where(['goods_id'=>$goods_id,'id'=>$price_id])->value('integral');
                    if($integral > 0){
                        $integral_data = array(
                            'user_id'   => $user_id,
                            'goods_id'  => $goods_id,
                            'price_id'  => $price_id,
                            'integral'  => $integral,
                            'remark'    => $goods_name
                        );
                        model('integral')->save($integral_data);
                    }
                    //积分消费生效
                    model('Integral')->where('order_sn',$out_trade_no)->update(['is_effect'=>'Y']);

                    $this->redirect('http://essj.baogt.com/Phone/headlines/My_Order.html');
                }
            }else{
                $this->redirect('http://essj.baogt.com/Phone/headlines/My_Order.html');
            }
        }

    }

    public function url_redirect()
    {
        $this->redirect('http://essj.baogt.com/Phone/headlines/My_Order.html');
    }

    protected function getResult(){
        // $result0 = I();
        $result = file_get_contents("php://input");
        // $result2 = $_POST;
        // $result3 = $_GET;
        // dump($result0);
        // dump($result1);
        // dump($result2);
        // dump($result3);die;
        $p = xml_parser_create();
        xml_parse_into_struct($p, $result, $vals);
        xml_parser_free($p);
        foreach ($vals as $k => $v) {
            if (strtoupper($v['tag']) != 'XML') {
                $results[$v['tag']] = $v['value'];
            }
        }
        return $results;

    }

    //获取设备ip
    private function _get_client_ip(){
        $cip = "unknown";
        if($_SERVER['REMOTE_ADDR']){
            $cip = $_SERVER['REMOTE_ADDR'];
        }elseif(getenv("REMOTE_ADDR")){
            $cip = getenv("REMOTE_ADDR");
        }
        return $cip;
    }

    //支付常量设置
    private function _setPayConfig($config){
        if(isset($config['mch_id'])){
            define('APPID',$config['app_id']);
            define('MCHID',$config['mch_id']);
            define('KEY',$config['key']);
            define('APPSECRET',$config['app_secret']);
        }
//        define('NOTIFY_URL', 'http://essj.baogt.com/mobile/pay/winxpay_notify');
//        define('SSLCERT_PATH','../cert/apiclient_cert.pem');
//        define('SSLKEY_PATH','../cert/apiclient_key.pem');
        define('CURL_PROXY_HOST',"0.0.0.0");
        define('CURL_PROXY_PORT',0);
        define('REPORT_LEVENL',1);
    }

    //查询支付配置
    private function _get_config($type ='weipay'){
        $pay_config = model('payConfig')->where(['pay_mark'=>$type])->find()->toArray();
        $configs    = unserialize($pay_config['pay_config']);
        $config     = array();
        foreach ($configs as $key => $value) {
            $config[$key] = $value['val'];
        }
        return $config;
    }

    protected function toPay($pay_url){
        print_r('
			<a href="'.$pay_url.'">确认支付</a>
			');
    }

    public function deal_order($out_trade_no,$total_amount){
        //订单信息验证
        $order_info = model('Order')
            ->field('order_id,order_sn,user_id')
            ->where(['order_sn'=>$out_trade_no,'deal_price'=>$total_amount])
            ->with(['orderInfo'=>function($query){
                $query->field('order_id,goods_id,price_id,goods_name,good_attr,price');
            }])
            ->find();
        if(empty($order_info))
            return false;

        //修改订单状态
        $res_status = model('order')->where(['order_sn'=>$out_trade_no])->update(['status'=>$this->order_waitting]);
        if(empty($res_status))
            return false;

        //获得赠送积分
        $goods_id   = $order_info['orderInfo'][0]['goods_id'];
        $price_id   = $order_info['orderInfo'][0]['price_id'];
        $user_id    = $order_info['user_id'];
        $goods_name = $order_info['orderInfo'][0]['goods_name'];
        $integral = model('Integral')->getProductIntegral($goods_id,$price_id);
        $integral_data = array(
            'user_id'   => $user_id,
            'goods_id'  => $goods_id,
            'price_id'  => $price_id,
            'integral'  => $integral,
            'remark'    => $goods_name
        );
        $res = model('Integral')->save($integral_data);
        //如果有订单积分消费则让积分消费失效
        model('Integral')->where('order_sn',$out_trade_no)->update(['is_effect'=>'Y']);
        if(empty($res))
            return false;

        return true;
    }


}
