<?php
/**
 * Created by tiway
 * Date: 2017/9/26
 * Time: 13:59
 */

namespace app\mobile\controller;


use app\common\controller\MobileBase;
use think\Exception;

class Goods extends MobileBase
{
    private $attr_like,$attr_capacity,$attr_color,$attr_net,$banner_sale;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->attr_capacity = 3;//容量
        $this->attr_color    = 2;//颜色
        $this->attr_like     = 4;//新旧
        $this->attr_net      = 1;//新旧

        $this->banner_sale = 3;

    }

    //商品页面
    public function good_index($api = false){
        if(request()->isGet()){
            //每页条数
            $per_page = input('per_page','5');
            //第几页，默认第一页
            $page  = input('page','1');
            $banners = model('Banner')
                ->field('id,title,banner')
                ->where(['type_id'=>$this->banner_sale,'is_using'=>'Y'])
                ->select();

            //品牌
            $brands = model('GoodsBrand')
                ->field('brand_id,brand_name')
                ->with(['brandModel'=>function($query){
                    $query->field('brand_id,model_id,name');
                }])
                ->where('status',1)->select();

            //容量
            $attr = model('Goods_attr')
                ->field('attr_id,value')
                ->find($this->attr_capacity);
            $attr_capacity['attr_id'] = $attr['attr_id'];
            $attr = unserialize($attr['value']);
            $k = 0;
            foreach ($attr  as $key => $value){
                $attr_capacity['capacity'][$k] = $value['value'];
                $k++;
            }
            unset($attr);

            //卖场
            $stores = model('storeInfo')
                ->field('id,store_name')
                ->where('is_using','Y')
                ->select();

            //商品
            $model = model('Goods')
                ->alias('G')
                ->join('ui_goods_price GP ',' G.goods_id = GP.goods_id')
                ->join('ui_goods_brand GB ',' G.brand_id = GB.brand_id')
                ->join('ui_brand_model BM ',' G.model_id = BM.model_id')
                ->field('G.goods_id,G.is_sale,G.brand_id,G.model_id,G.goods_thums,G.goods_name,G.sale_count,G.praise_percentage,G.store_id,GP.id as price_id,GP.campaign_price,GP.price,GP.attrs_values,GB.brand_name,BM.name')
                ->where(['G.is_sale'=>1]);
            $clone_model = clone $model;
            $goods_num = $clone_model->count();
            $goods = $model
                ->limit($per_page)
                ->page($page)
                ->select();

            $goods = $this->_getAttrs($goods);



            $data = array(
                'banners'   => $banners,
                'brands'    => $brands,
                'capacity'  => $attr_capacity,
                'stores'    => $stores,
                'goods'     => $goods,
                'goods_num' => $goods_num
            );

            if($api){
                return json(apiSuccess($data));
            }else{
                return view(['data'=>$data]);
            }
        }
    }

    //商品筛选
    public function good_list($api = false){
        if(request()->isPost()){
            $data = input();
            //每页条数
            $per_page = input('per_page','5');
            //第几页，默认第一页
            $page  = input('page','1');

            //容量


            $attr = model('Goods_attr')
                ->field('attr_id,value')
                ->find($this->attr_capacity);
            $attr_capacity['attr_id'] = $attr['attr_id'];
            $attr = unserialize($attr['value']);
            $k = 0;
            foreach ($attr  as $key => $value){
                $attr_capacity['capacity'][$k] = $value['value'];
                $k++;
            }
            unset($attr);

            //卖场
            $stores = model('storeInfo')
                ->field('id,store_name')
                ->where('is_using','Y')
                ->select();

            //筛选条件
            $model = model('Goods')
                ->alias('G')
                ->join('ui_goods_price GP ',' G.goods_id = GP.goods_id')
                ->join('ui_goods_brand GB ',' G.brand_id = GB.brand_id')
                ->join('ui_brand_model BM ',' G.model_id = BM.model_id')
                ->field('G.goods_id,G.is_sale,G.brand_id,G.model_id,G.goods_thums,G.goods_name,G.sale_count,G.praise_percentage,G.store_id,GP.id as price_id,GP.campaign_price,GP.price,GP.attrs_values,GB.brand_name,BM.name');

            if(!empty($data['order'])){#排序
                switch ($data['order'])
                {
                    //价格从低到高
                    case 'price_up':
                        $model = $model->order('GP.campaign_price');
                        break;
                    //价格从搞到低
                    case 'price_down':
                        $model = $model->order('GP.campaign_price DESC');
                        break;
                    //销量从低到高
                    case 'sale_up':
                        $model = $model->order('G.sale_count');
                        break;
                    //销量从高到低
                    case 'sale_down':
                        $model = $model->order('G.sale_count DESC');
                        break;
                    //好评从低到高
                    case 'praise_up':
                        $model = $model->order('G.praise_percentage');
                        break;
                    //好评从高到低
                    case 'praise_down':
                        $model = $model->order('G.praise_percentage DESC');
                        break;

                }
            }

            if(!empty($data['price'])){#价位
                switch ($data['price'])
                {
                    case '1':
                        $model = $model->where('GP.campaign_price','<',1500);
                        break;
                    case '2':
                        $model = $model->where('GP.campaign_price','between',[1500,3000]);
                        break;
                    case '3':
                        $model = $model->where('GP.campaign_price','between',[3000,4500]);
                        break;
                    case '4':
                        $model = $model->where('GP.campaign_price','>',4500);
                        break;
                    case 'all':
                        $model = $model->where('GP.campaign_price','>',0);
                        break;
                }
            }

            if(!empty($data['brand'])){#品牌
                $model = $model->where('G.brand_id',$data['brand']);
            }

            if(!empty($data['model'])){#型号
                $model = $model->where('G.model_id',$data['model']);
            }

            if(!empty($data['capacity'])){#容量
                $model = $model->where('GP.attrs_values','like','%'.$data['capacity'].'%');
            }

            if(!empty($data['store'])){#卖场
                $model = $model->where('G.store_id',$data['store']);
            }

            if(!empty($data['search_name'])){#搜索
                $search_name = $data['search_name'];
                $model = $model->where(function($query)use($search_name){
                    $query->where('GB.brand_name','like','%'.$search_name.'%')
                        ->whereOr('G.goods_name','like','%'.$search_name.'%')
                        ->whereOr('BM.name','like','%'.$search_name.'%');
                });
            }

            $model = $model->where(['G.is_sale'=>1]);
            $clone_object = clone $model;
            //滑动插件需要返回总页数
            $total_goods = $clone_object->count();
            $goods = $model
                ->limit($per_page)
                ->page($page)
                ->select();

            $goods = $this->_getAttrs($goods);

            $data = array(
                'capacity'  => $attr_capacity,
                'stores'    => $stores,
                'goods'     => $goods,
                'goods_num' => $total_goods
            );
        }

        if($api){
            return json(apiSuccess($data));
        }else{
            return view(['data'=>$data]);
        }
    }

    //商品信息
    public function good_detail($api = false){
        if(request()->isGet()){
            //新旧
            $likes      = model('GoodsAttr')->field('attr_id,value')->where('attr_id',$this->attr_like)->find();
            //容量
            $capacities = model('GoodsAttr')->where('attr_id',$this->attr_capacity)->find();
            //颜色
            $colors     = model('GoodsAttr')->where('attr_id',$this->attr_color)->find();

            //属性反序列化
            $data['like']['attr_id']        = $likes->attr_id;
            $data['like']['value']          = unserialize($likes->value);
            $data['capacities']['attr_id']  = $capacities->attr_id;
            $data['capacities']['value']    = unserialize($capacities->value);
            $data['colors']['attr_id']      = $colors->attr_id;
            $data['colors']['value']        = unserialize($colors->value);

            //是否收藏
            $goods_id = input('goods_id');
            $price_id = input('price_id');
            $is_colloction = model('Collection')
                ->where(['user_id'=>$this->user_id,'goods_id'=>$goods_id,'price_id'=>$price_id])
                ->find();
            if(!empty($is_colloction)){
                $data['is_colletion'] = 'Y';
            }else{
                $data['is_colletion'] = 'N';
            }

            try{
                if(empty($goods_id))
                    throw new Exception('参数错误');
                if(empty($price_id))
                    throw new Exception('参数错误');
                //添加浏览记录
                model('Goods')->where('goods_id',$goods_id)->setInc('look_num');
                //商品信息
                $good = model('Goods')
                    ->field('goods_id,goods_img1,goods_img2,goods_img3,goods_img4,goods_img5,goods_name,giveaway')
                    ->with(['goodsPrice'=>function($query)use($price_id){
                        $query->field('id as price_id,goods_id,campaign_price,price,attrs_values,integral')->where('id',$price_id);
                    }])
                    ->find($goods_id);

                if(empty($good))
                    throw new Exception('商品不存在');

                //拼接图片
                $img = array($good['goods_img1'],$good['goods_img2'],$good['goods_img3'],$good['goods_img4'],$good['goods_img5']);
                unset($good['goods_img1']);
                unset($good['goods_img2']);
                unset($good['goods_img3']);
                unset($good['goods_img4']);
                unset($good['goods_img5']);
                $img_arr = array();
                foreach ( $img as $key => $value){
                    if(!empty($value)){
                        $img_arr[]= $value;
                    }
                    continue;
                }
                $good['img'] = $img_arr;
                //拼接属性
                $attr = model('Goods')->get_four_attr($good['goods_price'][0]['attrs_values']);
                $good['attrs'] = $attr;
                $data['good'] = $good;

                if($api){
                    return json(apiSuccess($data));
                }else{
                    return view(['data'=>$data]);
                }

            }catch(\Exception $e){

                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }

    }

    //商品信息-详情
    public function good_check($api = false){
        if(request()->isGet()){
            try{
                $goods_id = input('goods_id');
                $price_id = input('price_id');
                if(empty($goods_id))
                    throw new Exception('操作失败');

                //商品信息
                $good = model('Goods')
                    ->field('goods_id,goods_name,report_id')
                    ->with(['goodsPrice'=>function($query)use($price_id){
                        $query->field('id as price_id,goods_id,campaign_price,price,attrs_values')->where('id',$price_id);
                    }])
                    ->find($goods_id);

                //拼接属性
                $attr = model('Goods')->get_four_attr($good['goods_price'][0]['attrs_values']);
                $good['attrs'] = $attr;

                if(empty($good))
                    throw new Exception('找到对应商品');

                //获得质检功能检查项和合格数与不合格数
                $fun_check = json_decode($good->checkInfo->fun_check);
                if(count($fun_check) > 0){
                    $new_fun_check = array();
                    foreach($fun_check as $key => $value){
                        $right = 0;
                        $wrong = 0;
                        if(count($value) > 0){
                            foreach ( $value as $k => $v){
                                if($v == 1){
                                    $right ++;
                                }elseif ($v == 2){
                                    $wrong ++;
                                }
                            }
                        }
                        $new_fun_check[$key]['right'] = $right;
                        $new_fun_check[$key]['wrong'] = $wrong;
                        $new_fun_check[$key][] = $value;
                    }
                }


                $check = $good->checkInfo;
                $check['fun_check'] = $new_fun_check;
                unset($good->checkInfo);

                $data = array(
                    'goods' => $good,
                    'check' => $check
                );

                return json(apiSuccess($data));

            }catch(\Exception $e){

                return json(apiFail($e->getMessage()));

            }
        }
    }

    //通过属性选择商品
    public function goods_price($api = false){
        if(request()->isPost()){
            try{
                $goods_id = input('goods_id');
                $attrs_str = input('attrs_str');
                $attrs_str = str_replace("，",",",$attrs_str);
                //获取对应属性的商品信息
                $goods = model('Goods')
                    ->field('goods_id')
                    ->with(['goodsPrice'=>function($query)use($attrs_str){
                        $query->field('id as price_id,goods_id,campaign_price,price,attrs_values,integral')->where('attrs_values','like','%'.$attrs_str.'%');
                    }])
                    ->where('goods_id',$goods_id)
                    ->find();

                if(empty($goods['goods_price']))
                    throw new Exception('该属性商品已售完');

                $attrs = model('Goods')->get_four_attr($goods['goods_price'][0]['attrs_values']);
                $goods['attrs'] = $attrs;

                if($api){
                    return json(apiSuccess($goods));
                }else{
                    return view(['goods'=>$goods]);
                }

            }catch (\Exception $e){
                if($api){
                    return json(apiFail($e->getMessage()));
                }else{
                    return view(['msg'=>$e->getMessage()]);
                }
            }
        }
    }

    private function _getAttrs($goods){
        if(!empty($goods)){
            foreach ($goods as $k => $v){
                if(!empty($v['attrs_values'])){
                    $attr = explode(',',$v['attrs_values']);
                    $attr_arr = array();
                    for($i=0;$i<4;$i++){
                        $attr_arr[$i+1] = $attr[$i];
                    }
                    $goods[$k]['attrs_values'] = $attr_arr;
                }
            }
        }
        return $goods;
    }

}