<?php
namespace app\admin\controller;
use app\common\controller\AdminBase;
use think\Exception;
use think\Validate;
header("Content-type:text/html;charset=utf-8");
class Set extends AdminBase{
    private $max_integral,$scale_integral;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->max_integral   = 86;//单个产品可兑换最大积分
        $this->scale_integral = 87;//积分兑换人民币比例



    }
	//银行卡列表
	public function eeer(){
		$list = model('Bank')->bank_list();;
	    $this->assign('list',$list);
		return view();
	}
    //添加银行卡
    public function add(){
    	if(request()->isAjax()){
			$data = input();
			try{
                if(empty($data['realname']))
                    throw new Exception('请输入开户名称');
                if(empty($data['account_name']))
                    throw new Exception('请输入银行名称');
                if(empty($data['bankaddress']))
                    throw new Exception('请输入银行地址');
                if(empty($data['account']))
                    throw new Exception('请输入银行帐号');
                $data['create_time'] = time();
                $data['user_id'] = session('islogin');
                db('bank')->insert($data);
                Api()->setApi('url',url('set/eeer'))->ApiSuccess();
            }catch(\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }
		}
    	return view();
    }
    //删除银行卡信息
    public function del(){
    	if(request()->isAjax()){
            try{
                $data = input();
                if(empty($data['id']))
                    throw new Exception('请选择要操作数据');
                $time = time();
                $res  = db('bank')
                    ->where('bank_id','in',$data['id'])
                    ->update(['delete_time'=>$time]);
                if(empty($res))
                    throw new Exception('操作失败');
                Api()->setApi('url',input('location'))->ApiSuccess();
            }catch(\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }

        }
    }
     /**
      *  支付设置页面
      */
    public function payset(){
    	   $data = input();
           $list = model('PayConfig')->select_pay($data);
	       $this->assign('list',$list);
		   return view();
    }
     /**
      *  获取支付配置信息
      */
    public function edit(){
    	if (request()->isGet()) {
    		$data = input();
    		if (empty($data['id'])) 
    			throw new Exception('请选择要操作数据');
    		$id = $data['id'];
    	    $list = model('PayConfig')->edit_payconfig($data);
    	    $data = unserialize($list);
    	    //dump($data);exit;
    	    $this->assign('list',$data);
    	    $this->assign('id',$id);
    	    return view(); 	
    	}

    }
    /**
      *  支付配置信息入库
      */
    public function modify(){   
    	if (request()->isAjax()) {
    		$arr = input();
    		try{
    		    if (empty($arr['id']))
    		     	throw new Exception('请选择要操作数据');
    		    $list = model('PayConfig')->edit_payconfig($arr);
    		    $data = unserialize($list);
    		    foreach ($data as $k => &$v) {
    		         $v['val'] = $arr[$k];
    		    }
    		    unset($v);
    		    $info =serialize($data);
                $res  = db('pay_config')
                    ->where('id','in',$arr['id'])
                    ->update(['pay_config'=>$info]);
                if(empty($res))
                    throw new Exception('操作失败');
                Api()->setApi('url',url('set/payset'))->ApiSuccess();
    		}catch(\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }
    		     
    	}
    }
    /**
      * 支付帐号状态修改
      */
    public function status(){
      $status = input('status');
      $url = input('location',url('set/payset'));
      $id = input('id');
      $re = db('pay_config')->where('id','in',$id)->update(['status'=>$status]);
      if(empty($re)){
            Api()->setApi('url',0)->ApiError();
       }else{
           Api()->setApi('url',url('set/payset'))->ApiSuccess();
       }
    }
    /*
     *账号删除
     */
    public function disable(){
    	if(request()->isAjax()){
            try{
                $data = input();
                if(empty($data['id']))
                    throw new Exception('请选择要操作数据');
                $time = time();
                $res  = db('pay_config')
                    ->where('id','in',$data['id'])
                    ->update(['delete_time'=>$time]);
                if(empty($res))
                    throw new Exception('操作失败');
                Api()->setApi('url',input('location'))->ApiSuccess();
            }catch(\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }

        }
    }
    /*
     *积分设置
     */
    public function integral(){
    	$arr['group'] = 'integral';
    	$max_integral = model('Config')->field('config_mark,config_value,config_name')->find($this->max_integral);
    	$scale_integral = model('Config')->field('config_mark,config_value,config_name')->find($this->scale_integral);
        $data = db('config')->where('id','>',$this->scale_integral)->where($arr)->field('config_mark,config_value,config_name')->select();
        $this->assign('data',$data);
        $this->assign('max_integral',$max_integral);
        $this->assign('scale_integral',$scale_integral);
    	return view();
    }
    /*
     *修改积分规则
     */
    public function addrule(){
    	if(request()->isAjax()){
    		$data = input();
    	try{
    		$validate = new Validate([
		        ['INTEGRAL_RATIO',    'require|number'],
				['INTEGRAL_RMB',      'require|number'],
				['INTEGRAL_REGISTER', 'require|number'],
				['INTEGRAL_NEWUSER',  'require|number'], 
				['INTEGRAL_PRAISE',   'require|number'],
				['INTEGRAL_COMMONLY', 'require|number'],
				['INTEGRAL_BAD',      'require|number'],
				['INTEGRAL_RETREAT',  'require|number'], 
			]);
			if (!$validate->check($data))
				throw new Exception('请输入正确的数据');
			$num = 0;
		    foreach ($data as $key => $value) {
                $arr['config_mark'] = $key;
                $result = db('config')->where($arr)->update(['config_value' =>$value]);
                if($result > 0){
                	$num ++;
                }
            }
                if($num < 1)
                    throw new Exception('操作失败');
				Api()->setApi('url',url('set/integral'))->ApiSuccess();
			}catch(\Exception $e){
                Api()->setApi('msg',$e->getMessage())->setApi('url',0)->ApiError();
            }
        }

    }
}
?>